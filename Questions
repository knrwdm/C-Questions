Q: What is a namespace?

A: Namespaces are used to organize classes. They also help to control the scope of methods and classes. 
Namespace can include classes, interfaces, structures, and/or delegates.

Q: What are value types?

A: A value type is based on a data type. It is a value type if it has the value of a variable 
directly on its own memory space. They use stack memory to store the values. The data types that are considered 
a value type are int, float, byte, short, decimal, struct, long, double, uint, ushort, sbyte, bool, char, enum, and ulong.

Q: What are reference types?

A: A reference type points to other memory location that holds the data. They will not store the 
variable value, but it will store the memory address of the value. This will indicate where the value is being stored.

Q: What is an automatic property and how is it useful?

A: Automatic properties are mostly used when no additional logic is required. It is a property that has a 
backing field generated by the compiler. It is useful in the way that it helps developers from writing primitive 
getters/setters that just return value. 

Q: What is the purpose of using statement?

A: A using statement basically simplifies the code and “cleans up” the object. They also help to ensure 
that the Dispose method is called rather an exception occurs or not. 

Q: What are dynamic type variables?

A: Dynamic types are similar to the object type, but the variables take place at runtime. It tells the 
compiler that a variable’s type can change.

Q: What is the purpose of the is operator?

A: The is operator evaluates the type compatibility at runtime. Also, checks if the object is 
compatible with a given type and tests an expression against the pattern.

Q: What are generics and how is using them useful?

A: Generic is a type of class that allows the user to define classes/methods with a placeholder. It is a powerful 
feature in C#. It also lets people define the type-safe data structure. 

Q: What is the scope of a public member of a class?

A: The scope of a public member of a variable includes public access specifier, private access specifier,protected 
success specifier, internal access specifier, and protected internal access specifier. A public access 
specifier allows a class to expose member variables/functions to other objects/functions. A private access specifier 
allows a class to hide its member variable/functions from other objects/functions. A protected access specifier allows 
a class to access the member variables/functions of its base class. An internal access specifier allows a class to 
expose its member variable/functions to other functions/objects in the current assembly. A protected internal access 
specifier allows a class to hide its member variable/function from different class objects and functions.

Q: Can you create a function that can accept a varying number of arguments?

A: Yes, by using the params keyword.

Q: How do you sort an array?

A:You can sort an array in different ways. These include: Array.Sort, Array.Reverse, CompareTo, delegate, 
iterative way, and LINQ descending.

Q: What is a nullable type and what purpose does it serve?

A: A nullable type can be the correct range of values for its underlying value type and an additional null value. 
You can use this when representing the undefined value of an underlying type.

Q: What is an enumeration?

A: An enumeration is a user defined data type. It is used to assign names to integral constants. Also called enum.

Q: What is inheritance?

A: Inheritance is a feature of an object-oriented language that allows the user to define a base class that provides 
specific functionality and define derived classes.

Q: Is multiple inheritance supported?

A: No, multiple inheritance is not supported. This is because it adds too much complexity to C#.

Q: What is the purpose of as operator?

A: An operator tells the compiler to perform specific math or logic manipulations. These include arithmetic, relational, 
logical, bitwise, assignment, and misc operators.

Q: What is an object?

A: An object is a block of memory that is allocated and configured according to the “blueprint” of a program. 
They can be stored in a name variable or an array/collection.

Q: What is the difference between a struct and a class?

A: Structs are value types. Classes are reference types.

Q: What is the difference between continue and break statements?

A: Break is used to terminate a loop. Continue skips the execution of the iteration.

Q: What is this and how is it used?

A: This is the pointer of a class or a struct. This is used when passing an instance of the current class/struct to 
the outside of a class/methods is needed.

Q: What is try and catch and when are they used?

A: Try-catch statements are used for exception handling. Try tells a certain block of code what the exception is. 
Catch catches the exception. 

Q: How is exception handling done?

A: Exception handling is done by using try, catch, finally, and throw. 

Q: What is finally and what is its purpose?

A: Finally is used to execute a given set of statements. 

Q: List the differences between Array and ArrayList.

A: An array is a strongly-typed collections of the same data type and have a fixed length that cannot be changed. 
An array list is not strongly-typed and can store multiple different datatypes or the same datatype. The size can 
increase or decrease, so it can take any size of values from any datatype. An array list is also a very flexible 
data structure. The main differences are: Array: can store any specific type of items/elements, can store only one 
datatype (string, int, etc.), cannot accept null Array List: can store any type of item/element, can store all datatypes, 
and accepts null.

Q: What is an object?

A: An object is a block of memory that is allocated and configured according to the “blueprint” of a program. 
They can be stored in a name variable or an array/collection.

Q: Define constructor.

A: A constructor is a method of the class that gets automatically invoked whenever an instance is created.

Q: When can var be used to declare a variable and how is the type for the variable determined?

A: Var can be used to declare a variable when a local variable is declared and initialized in the same statement. 

Q: What is an abstract class?

A: An abstract class must include one at least one abstract method, usually used to define a base class in the 
class hierarchy, cannot be inherited by structures, contains constructors and destructors, can implement functions 
with non-abstract methods, cannot support multiple inheritance, and cannot be static. You use abstract classes if the 
class is something.

Q: What is an interface?

A: An interface contains only the declaration of the method, properties, and events, but not the implementation. 
They look like a class, but as no implementation. You use an interface if a statement is capable of doing the thing.

Q: What is a method?

A: A method is a code of block that contains a series of statements.

Q: What is a property?

A: A property provides a flexible tool to read/write the value of a private field.

Q: What is an access specifier?

A: An access modifier describes as the scope of accessibility to an object and its members. 

Q: What access specifiers are supported and what do they mean?

A: Yes, they are supported. A public access specifier allows a class to expose member variables/functions to other 
objects/functions. A private access specifier allows a class to hide its member variable/functions from other objects/
functions. A protected access specifier allows a class to access the member variables/functions of its base class. 
An internal access specifier allows a class to expose its member variable/functions to other functions/objects in 
the current assembly. A protected internal access specifier allows a class to hide its member variable/function from 
different class objects and functions.

Q: What is a collection?

A: Collections provide a more flexible way to work with groups. It is also a class.

Q: What is a Hash Table?

A: A hash table represents a collection of key-and-value pairs that are based on hash code of the key. 
